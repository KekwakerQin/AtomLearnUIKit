import UIKit
import RxSwift

final class AuthViewController: UIViewController {
    
    private let authService: AuthServiceProtocol = FirebaseAuthService()
    private let userService: UserServiceProtocol = FirestoreUserService()
    private let disposeBag = DisposeBag()
    
    private let googleAuthButton: UIButton = {
        let button = UIButton(type: .system)
        button.setTitle("Sign in with Google", for: .normal)
        
        button.backgroundColor = .white
        button.setTitleColor(.black, for: .normal)
        button.layer.cornerRadius = 8
        button.translatesAutoresizingMaskIntoConstraints = false
        return button
    }()
    
    private let appleAuthButton: UIButton = {
        let button = UIButton(type: .system)
        button.setTitle("Sign in with Apple", for: .normal)
        
        button.backgroundColor = .white
        button.setTitleColor(.black, for: .normal)
        button.layer.cornerRadius = 8
        button.translatesAutoresizingMaskIntoConstraints = false
        return button
    }()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        setupLayout()
        setupActions()
    }
    
    private func setupView() {
        view.backgroundColor = .systemGray
        title = "Authorization"
        view.addSubview(googleAuthButton)
        view.addSubview(appleAuthButton)
    }
    
    private func setupActions() {
        googleAuthButton.addTarget(self, action: #selector(handleGoogleSignIn), for: .touchUpInside)
        appleAuthButton.addTarget(self, action: #selector(handleAppleSignIn), for: .touchUpInside)
    }
    
    private func setupLayout() {
        NSLayoutConstraint.activate([
            googleAuthButton.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            googleAuthButton.centerYAnchor.constraint(equalTo: view.centerYAnchor),
            googleAuthButton.heightAnchor.constraint(equalToConstant: 44),
            
            // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —à–∏—Ä–∏–Ω–∞
            googleAuthButton.widthAnchor.constraint(equalTo: view.widthAnchor, multiplier: 0.7),
            
            // –ú–∏–Ω–∏–º—É–º –∏ –º–∞–∫—Å–∏–º—É–º (–µ—Å–ª–∏ –Ω–∞–¥–æ)
            googleAuthButton.widthAnchor.constraint(greaterThanOrEqualToConstant: 200),
            googleAuthButton.widthAnchor.constraint(lessThanOrEqualToConstant: 320),
            
            appleAuthButton.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            appleAuthButton.topAnchor.constraint(equalTo: googleAuthButton.bottomAnchor, constant: UIScreen.main.bounds.height * 0.05),
            appleAuthButton.heightAnchor.constraint(equalToConstant: 44),
            
            appleAuthButton.widthAnchor.constraint(equalTo: view.widthAnchor, multiplier: 0.7),
            
            appleAuthButton.widthAnchor.constraint(greaterThanOrEqualToConstant: 200),
            appleAuthButton.widthAnchor.constraint(lessThanOrEqualToConstant: 320),
        ])
    }
    
    @objc private func handleGoogleSignIn() {
        authService.signInWithGoogle(from: self)
            .flatMap { user in
                self.userService.createUserIfNeeded(from: user)
            }
            .observe(on: MainScheduler.instance)
            .subscribe(
                onSuccess: { appUser in
                    print("–í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω, AppUser: \(appUser)")

                    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                    if let window = UIApplication.shared.connectedScenes
                        .compactMap({ $0 as? UIWindowScene })
                        .first?.windows
                        .first(where: { $0.isKeyWindow }) {
                        AppLauncher.shared.launch(in: window)
                    }
                },
                onFailure: { error in
                    print("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: \(error.localizedDescription)")
                    // –ü–æ–∫–∞–∑–∞—Ç—å alert –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É
                }
            )
            .disposed(by: disposeBag)
    }
    
    @objc private func handleAppleSignIn() {
        authService.signInWithApple(from: self)
            .do(onSubscribe: { print("üöÄ –ù–∞—á–∞–ª–∏ –≤—Ö–æ–¥ –ø–æ Apple") })
            .flatMap { user in
                print("‚úÖ –ü–æ–ª—É—á–µ–Ω user: \(user.uid)")
                return self.userService.createUserIfNeeded(from: user)
            }
            .observe(on: MainScheduler.instance)
            .subscribe(onSuccess: { appUser in
                print("üéâ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥, appUser: \(appUser.uid)")
                AppLauncher.shared.launch(in: UIApplication.shared.windows.first!)
            }, onFailure: { error in
                print("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ Apple: \(error.localizedDescription)")
            })
            .disposed(by: disposeBag)
    }
}
